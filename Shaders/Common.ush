// Copyright Voxel Plugin SAS. All Rights Reserved.

#pragma once

#include "/Engine/Private/Common.ush"
#include "VoxelEngineVersion.ush"

#define INTELLISENSE_PARSER __INTELLISENSE__ || __RESHARPER__

#if INTELLISENSE_PARSER
#error "INTELLISENSE_PARSER"
#include "Intellisense.ush"

#undef check
#define check(...) __VA_ARGS__

#define VOXEL_DEBUG 1
#define INTELLISENSE_HIDE(...)
#else
#define INTELLISENSE_HIDE(...) __VA_ARGS__
// Const breaks compiler
#define const
#endif

#ifndef check
#define check(...)
#endif

#ifndef VOXEL_DEBUG
#define VOXEL_DEBUG 0
#endif

#if COMPILER_CPP
#undef check
#endif

#if !VOXEL_DEBUG
#undef check
#define check(...)
#endif

#if VOXEL_ENGINE_VERSION >= 507
#define UE_507_SWITCH(Before, AfterOrEqual) AfterOrEqual
#define UE_507_ONLY(...) __VA_ARGS__
#else
#define UE_507_SWITCH(Before, AfterOrEqual) Before
#define UE_507_ONLY(...)
#endif

#if VOXEL_ENGINE_VERSION >= 506
#define UE_506_SWITCH(Before, AfterOrEqual) AfterOrEqual
#define UE_506_ONLY(...) __VA_ARGS__
#else
#define UE_506_SWITCH(Before, AfterOrEqual) Before
#define UE_506_ONLY(...)
#endif

#include "/Engine/Private/OctahedralCommon.ush"

#define GetPrimitiveDataFromParameters(Parameters) GetPrimitiveData(Parameters)

// Concatenates two preprocessor tokens, performing macro expansion on them first
#define PREPROCESSOR_JOIN(x, y) PREPROCESSOR_JOIN_INNER(x, y)
#define PREPROCESSOR_JOIN_INNER(x, y) x##y

#define KINDA_SMALL_NUMBER 1.e-4f

#define MAX_uint8	0xff
#define MAX_uint16	0xffff
#define MAX_uint32	0xffffffff
#define MAX_uint64	0xffffffffffffffff
#define MAX_int8	0x7f
#define MAX_int16	0x7fff
#define MAX_int32	0x7fffffff
#define MAX_int64	0x7fffffffffffffff

uint Get3DIndex(const uint3 Size, const uint3 Position)
{
	check(all(Position < Size));
	return Position.x + Size.x * Position.y + Size.x * Size.y * Position.z;
}

float3 DivideByW(const float4 Value)
{
	return Value.xyz / Value.w;
}

float3 TransformPosition(const float3 Value, const float4x4 Transform)
{
	return DivideByW(mul(float4(Value, 1.f), Transform));
}

float3 TransformVector(const float3 Value, const float3x3 Transform)
{
	return mul(Value, Transform);
}
float3 TransformVector(const float3 Value, float4x4 Transform)
{
	return mul(Value, (float3x3)Transform);
}

uint MurmurHash32(uint Hash)
{
	Hash ^= Hash >> 16;
	Hash *= 0x85ebca6b;
	Hash ^= Hash >> 13;
	Hash *= 0xc2b2ae35;
	Hash ^= Hash >> 16;
	return Hash;
}

uint MurmurHash32_uint3(const uint3 Value, const uint Seed = 0)
{
	const uint Size = 3;

	uint H = Seed;
	UNROLL
	for (uint Index = 0; Index < Size; ++Index)
	{
		uint K = Value[Index];
		K *= 0xcc9e2d51;
		K = (K << 15) | (K >> 17);
		K *= 0x1b873593;
		H ^= K;
		H = (H << 13) | (H >> 19);
		H = H * 5 + 0xe6546b64;
	}

	H ^= Size;
	H ^= H >> 16;
	H *= 0x85ebca6b;
	H ^= H >> 13;
	H *= 0xc2b2ae35;
	H ^= H >> 16;
	return H;
}

float4 HashInt(uint Hash)
{
	Hash = MurmurHash32(Hash);

	float4 Color;
	Color.r = (Hash >> 0) & 0xFF;
	Color.g = (Hash >> 8) & 0xFF;
	Color.b = (Hash >> 16) & 0xFF;
	Color.a = (Hash >> 24) & 0xFF;
	Color /= 255.f;
	return Color;
}

float4 HashPosition(const uint3 Hash)
{
	return HashInt(Hash.x ^ MurmurHash32(Hash.y) ^ MurmurHash32(MurmurHash32(Hash.z)));
}

uint FloatToByte(const float Value)
{
	return clamp(floor(Value * 255.999f), 0, 255);
}
float ByteToFloat(const uint Value)
{
	return Value * (1.f / 255.f);
}

uint FloatToNibble(const float Value)
{
	return clamp(floor(Value * 15.999f), 0, 15);
}
float NibbleToFloat(const uint Value)
{
	return Value * (1.f / 15.f);
}

uint EncodeColor(const float4 Color)
{
	return
		(FloatToByte(Color.b) << 0 ) |
		(FloatToByte(Color.g) << 8 ) |
		(FloatToByte(Color.r) << 16) |
		(FloatToByte(Color.a) << 24);
}
float4 DecodeColor(const uint Color)
{
	return float4(
		ByteToFloat((Color >> 16) & 0xFF),
		ByteToFloat((Color >> 8 ) & 0xFF),
		ByteToFloat((Color >> 0 ) & 0xFF),
		ByteToFloat((Color >> 24) & 0xFF));
}

float GetPixelDepth(const float3 HitPosition, const float4x4 WorldToClip)
{
	return TransformPosition(HitPosition, WorldToClip).z;
}

float RemapValue(const float Value, const float Min, const float Max, const float NewMin, const float NewMax)
{
	const float Alpha = (Value - Min) / (Max - Min);
	return NewMin + Alpha * (NewMax - NewMin);
}

float3 RotateVector(const float3 Position, const float4 Rotation)
{
	// See FQuat::RotateVector
	const float3 Q = float3(Rotation.x, Rotation.y, Rotation.z);
	const float3 T = 2.f * cross(Q, Position);

	return Position + (Rotation.w * T) + cross(Q, T);
}
float3 UnrotateVector(const float3 Position, const float4 Rotation)
{
	// See FQuat::UnrotateVector
	const float3 Q = float3(-Rotation.x, -Rotation.y, -Rotation.z);
	const float3 T = 2.f * cross(Q, Position);

	return Position + (Rotation.w * T) + cross(Q, T);
}

float3 SafeInverseVector(const float3 Vector)
{
	float3 Result;
	Result.x = Vector.x != 0.f ? 1.f / Vector.x : 1e9f;
	Result.y = Vector.y != 0.f ? 1.f / Vector.y : 1e9f;
	Result.z = Vector.z != 0.f ? 1.f / Vector.z : 1e9f;
	return Result;
}

float3 GetTriangleNormal(const float3 A, const float3 B, const float3 C)
{
	return normalize(cross(C - A, B - A));
}

bool RayTriangleIntersection(
	const float3 RayOrigin,
	const float3 RayDirection,
	const float3 TriangleA,
	const float3 TriangleB,
	const float3 TriangleC,
	const bool bAllowNegativeTime,
	out float OutTime,
	out float3 OutBarycentrics)
{
	const float3 Diff = RayOrigin - TriangleA;
	const float3 Edge1 = TriangleB - TriangleA;
	const float3 Edge2 = TriangleC - TriangleA;
	const float3 Normal = cross(Edge1, Edge2);

	// With:
	// Q = Diff, D = RayDirection, E1 = Edge1, E2 = Edge2, N = Cross(E1, E2)
	//
	// Solve:
	// Q + t * D = b1 * E1 + b2 * E2
	//
	// Using:
	//   |Dot(D, N)| * b1 = sign(Dot(D, N)) * Dot(D, Cross(Q, E2))
	//   |Dot(D, N)| * b2 = sign(Dot(D, N)) * Dot(D, Cross(E1, Q))
	//   |Dot(D, N)| * t = -sign(Dot(D, N)) * Dot(Q, N)

	float Dot = dot(RayDirection, Normal);
	float Sign;
	if (Dot > KINDA_SMALL_NUMBER)
	{
		Sign = 1;
	}
	else if (Dot < -KINDA_SMALL_NUMBER)
	{
		Sign = -1;
		Dot = -Dot;
	}
	else
	{
		// Ray and triangle are parallel
		return false;
	}

	const float DotTimesB1 = Sign * dot(RayDirection, cross(Diff, Edge2));
	if (DotTimesB1 < 0)
	{
		// b1 < 0, no intersection
		return false;
	}

	const float DotTimesB2 = Sign * dot(RayDirection, cross(Edge1, Diff));
	if (DotTimesB2 < 0)
	{
		// b2 < 0, no intersection
		return false;
	}

	if (DotTimesB1 + DotTimesB2 > Dot)
	{
		// b1 + b2 > 1, no intersection
		return false;
	}

	// Line intersects triangle, check if ray does.
	const float DotTimesT = -Sign * dot(Diff, Normal);
	if (DotTimesT < 0 && !bAllowNegativeTime)
	{
		// t < 0, no intersection
		return false;
	}

	// Ray intersects triangle.
	OutTime = DotTimesT / Dot;

	OutBarycentrics.y = DotTimesB1 / Dot;
	OutBarycentrics.z = DotTimesB2 / Dot;
	OutBarycentrics.x = 1 - OutBarycentrics.y - OutBarycentrics.z;

	return true;
}

// H00
float HermiteP0(const float T)
{
	return (1 + 2 * T) * Square(1 - T);
}
// H10
float HermiteD0(const float T)
{
	return T * Square(1 - T);
}

// H01
float HermiteP1(const float T)
{
	return Square(T) * (3 - 2 * T);
}
// H11
float HermiteD1(const float T)
{
	return Square(T) * (T - 1);
}

float DistanceSquared(const float2 A, const float2 B)
{
	const float2 C = A - B;
	return dot(C, C);
}
float DistanceSquared(const float3 A, const float3 B)
{
	const float3 C = A - B;
	return dot(C, C);
}

uint SampleTexture2D_UINT(const Texture2D Texture, const uint2 UVs)
{
	return asuint(Texture[UVs].r);
}
uint SampleTexture1D_UINT(const Texture2D Texture, uint Index)
{
	return SampleTexture2D_UINT(Texture, uint2(Index, 0));
}

float4 GetGatherAlphas(const float2 UVs, const float2 TextureSize, const float Half = 0.5f)
{
	const float2 Alphas = frac(UVs * TextureSize + Half);

	return float4(
		(1 - Alphas.x) * Alphas.y,
		Alphas.x * Alphas.y,
		Alphas.x * (1 - Alphas.y),
		(1 - Alphas.x) * (1 - Alphas.y)
	);
}

float InterpolateGather(const float X, const float Y, const float Z, const float W, const float2 UVs, const float2 TextureSize)
{
	const float2 Alphas = frac(UVs * TextureSize + 0.5f);

	return lerp(
		lerp(W, Z, Alphas.x),
		lerp(X, Y, Alphas.x),
		Alphas.y);
}

float3 InterpolateGather(const float3 X, const float3 Y, const float3 Z, const float3 W, const float2 UVs, const float2 TextureSize)
{
	const float2 Alphas = frac(UVs * TextureSize + 0.5f);

	return lerp(
		lerp(W, Z, Alphas.x),
		lerp(X, Y, Alphas.x),
		Alphas.y);
}

float GetFraction(const uint Seed)
{
	return asfloat(0x3F800000U | (Seed >> 9)) - 1.0f;
}

uint2 GetTextureIndex_Log2(
	const uint Index,
	const uint TextureSizeLog2)
{
	const uint X = Index & ((1u << TextureSizeLog2) - 1);
	const uint Y = Index >> TextureSizeLog2;

	return uint2(X, Y);
}